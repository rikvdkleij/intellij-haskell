/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int NCOMMENT = 2;
    public static final int NHADDOCK = 4;
    public static final int QQ = 6;
    public static final int OPTIONS_GHC = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [10, 7, 4]
     * Total runtime size is 3104 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 11] << 7) | ((ch >> 4) & 0x7f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 544 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\3\1\1\2\65\1\1\3\u01e5\1");

    /* The ZZ_CMAP_Y table has 512 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\53\1\2\13\1\14\1\15\1" +
                    "\16\1\17\3\13\302\1\1\20\4\1\2\21\7\1\1\22\1\23\1\24\6\1\1\25\3\13\1\26\2" +
                    "\13\1\27\1\30\1\31\1\32\10\31\1\33\3\31\60\1\1\34\144\1\1\35\20\1\1\36\51" +
                    "\1");

    /* The ZZ_CMAP_A table has 496 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\5\0\1\3\3\0\1\3\1\2\2\3\1\1\22\0\1\42\1\74\1\21\1\4\2\74\1\45\1\73\1\114" +
                    "\1\115\1\74\1\76\1\116\1\31\1\41\1\74\1\34\4\67\3\37\2\27\1\107\1\117\1\100" +
                    "\1\103\1\101\1\102\1\104\1\57\1\62\1\60\1\33\1\43\1\63\1\72\1\54\1\66\1\25" +
                    "\1\61\1\52\1\71\1\50\1\40\1\66\1\56\1\65\1\53\1\55\1\51\1\64\1\25\1\36\1\70" +
                    "\1\25\1\120\1\20\1\44\1\47\1\22\1\121\1\32\1\126\1\16\1\7\1\10\1\6\1\127\1" +
                    "\137\1\5\2\23\1\12\1\135\1\11\1\15\1\134\1\23\1\14\1\13\1\132\1\17\1\46\1" +
                    "\136\1\35\1\133\1\23\1\122\1\105\1\123\1\106\6\0\1\130\12\0\1\3\13\0\1\24" +
                    "\10\0\1\24\12\0\21\131\31\25\7\131\31\23\6\131\10\0\2\130\6\0\12\30\10\0\1" +
                    "\26\22\0\1\26\4\0\1\26\2\0\1\26\6\0\1\26\13\0\1\111\1\131\1\112\17\131\1\113" +
                    "\15\131\1\124\27\125\1\77\36\125\1\110\16\125\1\74\11\125\5\0\1\75\20\0\1" +
                    "\24\20\0\1\24\10\0");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7" +
                    "\1\10\1\11\2\12\1\4\1\12\1\13\1\3\1\14" +
                    "\1\4\1\15\3\4\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\3\5\6\40\1\41" +
                    "\1\40\1\42\1\43\2\44\1\45\1\44\1\46\1\0" +
                    "\6\5\1\47\1\50\3\5\1\51\4\5\1\52\2\5" +
                    "\2\0\1\53\1\0\2\5\1\11\4\0\1\54\5\0" +
                    "\2\22\1\23\3\0\1\55\1\0\1\56\4\5\1\57" +
                    "\1\60\1\61\1\62\1\63\3\0\1\42\1\0\1\44" +
                    "\1\0\1\44\1\53\2\44\4\0\1\64\17\5\1\65" +
                    "\2\5\20\0\1\5\1\66\1\0\1\66\3\54\1\67" +
                    "\1\70\1\71\20\0\1\72\1\73\4\5\1\74\16\44" +
                    "\1\71\17\44\6\0\1\64\15\5\1\75\1\76\2\5" +
                    "\1\77\13\0\1\54\1\100\1\54\15\0\1\101\1\102" +
                    "\2\5\27\44\7\0\1\64\3\5\1\103\6\5\1\104" +
                    "\3\0\1\5\1\105\3\0\1\5\1\106\1\107\1\5" +
                    "\1\110\4\5\6\0\1\111\1\0\3\5\1\112\1\5" +
                    "\1\113\2\0\1\100\3\0\1\64\1\114\1\0\1\115" +
                    "\2\0\2\100\3\0\1\64\7\0\1\64\7\0\1\116" +
                    "\5\0\1\117\1\116\2\0\1\54\5\0\1\120\1\121" +
                    "\1\122\3\0\1\100";

    private static int[] zzUnpackAction() {
        int[] result = new int[424];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\140\0\300\0\u0120\0\u0180\0\u01e0\0\u0240\0\u01e0" +
                    "\0\u02a0\0\u0300\0\u0360\0\u03c0\0\u0420\0\u0480\0\u04e0\0\u0540" +
                    "\0\u05a0\0\u0600\0\u0660\0\u06c0\0\u0720\0\u0780\0\u07e0\0\u0840" +
                    "\0\u08a0\0\u0900\0\u0960\0\u01e0\0\u09c0\0\u01e0\0\u0a20\0\u0a80" +
                    "\0\u0ae0\0\u0b40\0\u0ba0\0\u0c00\0\u0a20\0\u0a20\0\u0a20\0\u0c60" +
                    "\0\u0a20\0\u0a20\0\u0a20\0\u0a20\0\u01e0\0\u01e0\0\u01e0\0\u01e0" +
                    "\0\u0cc0\0\u01e0\0\u0d20\0\u01e0\0\u01e0\0\u0d80\0\u0de0\0\u0e40" +
                    "\0\u01e0\0\u0ea0\0\u0f00\0\u0f60\0\u0fc0\0\u1020\0\u01e0\0\u1080" +
                    "\0\u10e0\0\u1140\0\u11a0\0\u1200\0\u01e0\0\u1260\0\u11a0\0\u12c0" +
                    "\0\u1320\0\u1380\0\u13e0\0\u1440\0\u14a0\0\u01e0\0\u05a0\0\u1500" +
                    "\0\u1560\0\u15c0\0\u1620\0\u05a0\0\u1680\0\u16e0\0\u1740\0\u17a0" +
                    "\0\u05a0\0\u1800\0\u1860\0\u18c0\0\u0720\0\u01e0\0\u1920\0\u0780" +
                    "\0\u1980\0\u01e0\0\u19e0\0\u1a40\0\u1aa0\0\u08a0\0\u1b00\0\u1b60" +
                    "\0\u1bc0\0\u1c20\0\u1c80\0\u1ce0\0\u1d40\0\u1da0\0\u1da0\0\u0cc0" +
                    "\0\u1e00\0\u1e60\0\u1e00\0\u1ec0\0\u1f20\0\u1f80\0\u1fe0\0\u2040" +
                    "\0\u20a0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u10e0\0\u2100" +
                    "\0\u2160\0\u2100\0\u21c0\0\u2220\0\u2280\0\u22e0\0\u11a0\0\u2340" +
                    "\0\u23a0\0\u2400\0\u2460\0\u24c0\0\u2520\0\u2580\0\u25e0\0\u2640" +
                    "\0\u26a0\0\u2700\0\u2760\0\u27c0\0\u2820\0\u2880\0\u28e0\0\u2940" +
                    "\0\u29a0\0\u2a00\0\u2a60\0\u2ac0\0\u2b20\0\u05a0\0\u2b80\0\u2be0" +
                    "\0\u2c40\0\u2ca0\0\u2d00\0\u2d60\0\u2dc0\0\u2e20\0\u2e80\0\u2ee0" +
                    "\0\u2f40\0\u2fa0\0\u3000\0\u3060\0\u30c0\0\u3120\0\u3180\0\u31e0" +
                    "\0\u3240\0\u32a0\0\u32a0\0\u3300\0\u3360\0\u33c0\0\u3420\0\u1bc0" +
                    "\0\u1c20\0\u01e0\0\u3480\0\u34e0\0\u3540\0\u35a0\0\u3600\0\u3660" +
                    "\0\u36c0\0\u3720\0\u3780\0\u37e0\0\u3840\0\u38a0\0\u3900\0\u3960" +
                    "\0\u39c0\0\u3a20\0\u01e0\0\u01e0\0\u3a80\0\u3ae0\0\u3b40\0\u3ba0" +
                    "\0\u01e0\0\u3c00\0\u3c60\0\u3cc0\0\u3d20\0\u3d80\0\u3de0\0\u3e40" +
                    "\0\u3ea0\0\u3f00\0\u3f60\0\u3fc0\0\u4020\0\u4080\0\u40e0\0\u11a0" +
                    "\0\u4140\0\u41a0\0\u4200\0\u4260\0\u42c0\0\u4320\0\u4380\0\u43e0" +
                    "\0\u4440\0\u44a0\0\u4500\0\u4560\0\u45c0\0\u4620\0\u4680\0\u46e0" +
                    "\0\u4740\0\u47a0\0\u4800\0\u4860\0\u48c0\0\u4920\0\u4980\0\u49e0" +
                    "\0\u4a40\0\u4aa0\0\u4b00\0\u4b60\0\u4bc0\0\u4c20\0\u4c80\0\u4ce0" +
                    "\0\u4d40\0\u4da0\0\u4e00\0\u05a0\0\u05a0\0\u4e60\0\u4ec0\0\u05a0" +
                    "\0\u4f20\0\u4f80\0\u4fe0\0\u5040\0\u50a0\0\u5100\0\u5160\0\u51c0" +
                    "\0\u5220\0\u5280\0\u52e0\0\u5340\0\u53a0\0\u5400\0\u5460\0\u54c0" +
                    "\0\u5520\0\u5580\0\u55e0\0\u5640\0\u56a0\0\u5700\0\u5760\0\u57c0" +
                    "\0\u5820\0\u5880\0\u58e0\0\u5940\0\u05a0\0\u59a0\0\u5a00\0\u5a60" +
                    "\0\u5ac0\0\u5b20\0\u5b80\0\u5be0\0\u5c40\0\u5ca0\0\u5d00\0\u5d60" +
                    "\0\u5dc0\0\u5e20\0\u5e80\0\u5ee0\0\u5f40\0\u5fa0\0\u6000\0\u6060" +
                    "\0\u60c0\0\u6120\0\u6180\0\u61e0\0\u6240\0\u62a0\0\u6300\0\u6360" +
                    "\0\u63c0\0\u6420\0\u6480\0\u64e0\0\u6540\0\u65a0\0\u6600\0\u6660" +
                    "\0\u66c0\0\u6720\0\u6780\0\u67e0\0\u6840\0\u68a0\0\u6900\0\u6960" +
                    "\0\u05a0\0\u69c0\0\u6a20\0\u6a80\0\u6ae0\0\u05a0\0\u6b40\0\u6ba0" +
                    "\0\u6c00\0\u6c60\0\u05a0\0\u05a0\0\u6cc0\0\u05a0\0\u6d20\0\u6d80" +
                    "\0\u6de0\0\u6e40\0\u6ea0\0\u6f00\0\u6f60\0\u6fc0\0\u7020\0\u7080" +
                    "\0\u05a0\0\u70e0\0\u7140\0\u71a0\0\u7200\0\u05a0\0\u7260\0\u05a0" +
                    "\0\u72c0\0\u7320\0\u7380\0\u73e0\0\u7440\0\u74a0\0\u7500\0\u05a0" +
                    "\0\u7560\0\u05a0\0\u75c0\0\u7620\0\u7680\0\u76e0\0\u7740\0\u77a0" +
                    "\0\u7800\0\u7860\0\u78c0\0\u7920\0\u7980\0\u79e0\0\u7a40\0\u7aa0" +
                    "\0\u7b00\0\u7b60\0\u7bc0\0\u7c20\0\u7c80\0\u7ce0\0\u7d40\0\u7da0" +
                    "\0\u7e00\0\u2580\0\u7e60\0\u7ec0\0\u7f20\0\u7f80\0\u7fe0\0\u01e0" +
                    "\0\u01e0\0\u8040\0\u80a0\0\u01e0\0\u8100\0\u8160\0\u81c0\0\u8220" +
                    "\0\u8280\0\u01e0\0\u01e0\0\u01e0\0\u82e0\0\u8340\0\u83a0\0\u8400";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[424];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\2\21\1\22\1\23\1\21\1\24" +
                    "\1\25\1\26\2\21\2\27\1\30\1\31\1\32\1\21" +
                    "\1\27\1\33\1\21\1\27\1\30\1\27\1\34\1\35" +
                    "\1\27\1\36\1\37\1\21\1\37\17\27\1\30\3\27" +
                    "\1\40\2\37\1\41\1\37\1\42\1\37\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64" +
                    "\1\65\1\37\2\21\2\6\1\66\2\21\1\67\1\70" +
                    "\1\21\1\71\1\72\27\71\1\73\70\71\1\74\5\71" +
                    "\1\0\10\71\1\72\27\71\1\75\70\71\1\76\5\71" +
                    "\1\0\10\71\1\72\42\71\1\77\40\71\1\100\12\71" +
                    "\1\101\7\71\1\0\7\71\1\0\1\7\1\10\1\11" +
                    "\1\102\14\103\1\104\2\103\1\0\1\103\1\0\1\103" +
                    "\1\0\1\105\10\103\1\11\30\103\1\106\1\103\1\0" +
                    "\20\103\1\107\11\103\1\0\7\103\141\0\1\11\1\10" +
                    "\1\11\36\0\1\11\76\0\1\11\1\0\1\11\36\0" +
                    "\1\11\76\0\1\110\1\0\1\110\1\37\1\111\1\112" +
                    "\1\113\1\114\6\112\1\115\1\37\1\0\3\112\4\0" +
                    "\1\37\1\112\2\0\1\112\3\0\1\37\1\110\2\0" +
                    "\1\37\1\112\1\37\24\0\15\37\14\0\1\37\2\112" +
                    "\2\0\6\112\4\0\1\116\1\21\1\117\2\21\1\120" +
                    "\6\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\3\21\1\121" +
                    "\2\21\4\0\1\116\10\21\1\122\2\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\6\21\4\0\1\116\3\21\1\123" +
                    "\4\21\1\124\2\21\2\0\7\21\1\0\1\125\6\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\6\21\4\0\1\116\5\21\1\126\5\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\4\0\1\116\3\21" +
                    "\1\127\7\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\4\0\1\116\3\21\1\130\7\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\4\0\1\116\13\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\6\21\4\0\1\116\1\21\1\131" +
                    "\11\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\6\21\4\0" +
                    "\1\116\5\21\1\132\5\21\2\0\7\21\1\0\1\133" +
                    "\6\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\4\0\1\37\13\0\1\37\10\0" +
                    "\1\37\7\0\1\37\3\0\1\37\1\0\1\37\24\0" +
                    "\15\37\14\0\1\37\1\134\11\0\2\135\1\136\15\135" +
                    "\1\137\1\136\116\135\4\0\1\116\13\21\2\0\1\140" +
                    "\4\21\1\141\1\21\1\0\2\21\1\141\2\21\1\141" +
                    "\1\21\2\0\1\21\2\0\1\21\1\0\17\21\1\141" +
                    "\4\21\32\0\2\21\2\0\6\21\4\0\1\142\13\27" +
                    "\2\0\7\27\1\0\7\27\2\0\1\27\2\0\1\27" +
                    "\1\0\24\27\32\0\2\27\2\0\6\27\10\0\1\143" +
                    "\11\0\1\144\4\0\1\30\1\31\3\0\1\30\2\0" +
                    "\1\30\1\0\1\145\1\0\1\143\23\0\1\30\72\0" +
                    "\1\146\4\0\2\31\3\0\1\31\2\0\1\31\27\0" +
                    "\1\31\54\0\1\37\13\0\1\37\1\0\1\144\4\0" +
                    "\1\30\1\31\1\147\2\0\1\30\2\0\1\30\1\0" +
                    "\1\37\1\150\2\0\1\37\1\0\1\37\17\0\1\30" +
                    "\4\0\5\37\1\53\7\37\14\0\1\37\22\0\1\143" +
                    "\4\0\1\151\4\0\1\144\4\0\1\30\1\31\3\0" +
                    "\1\30\2\152\1\30\1\151\1\145\1\0\1\143\23\0" +
                    "\1\30\51\0\1\11\1\0\1\11\35\0\1\145\1\11" +
                    "\101\0\1\37\13\0\1\37\10\0\1\37\7\0\1\37" +
                    "\3\0\1\37\1\0\1\37\24\0\15\37\14\0\1\37" +
                    "\12\0\2\153\1\0\15\153\1\154\52\153\1\0\13\153" +
                    "\1\155\30\153\4\0\1\37\13\0\1\37\1\0\1\144" +
                    "\4\0\1\30\1\31\1\37\2\0\1\30\2\0\1\30" +
                    "\1\0\1\37\1\150\2\0\1\37\1\0\1\37\17\0" +
                    "\1\30\4\0\15\37\14\0\1\37\16\0\1\37\13\0" +
                    "\1\37\10\0\1\52\7\0\1\37\3\0\1\37\1\0" +
                    "\1\37\24\0\15\37\14\0\1\37\16\0\1\37\13\112" +
                    "\1\37\1\0\3\112\4\0\1\37\1\112\2\0\1\112" +
                    "\3\0\1\37\3\0\1\37\1\112\1\37\24\0\15\37" +
                    "\14\0\1\37\2\112\2\0\6\112\4\0\1\37\13\0" +
                    "\1\37\10\0\1\37\7\0\1\37\3\0\1\37\1\0" +
                    "\1\37\24\0\5\37\1\54\7\37\14\0\1\37\16\0" +
                    "\1\156\13\0\1\156\10\0\1\156\7\0\1\156\3\0" +
                    "\1\156\1\0\1\156\24\0\13\156\1\157\1\156\14\0" +
                    "\1\156\13\0\1\160\1\0\1\160\1\161\13\162\1\161" +
                    "\1\0\5\162\2\0\1\161\2\162\1\0\2\162\1\0" +
                    "\1\162\2\160\1\162\1\0\1\161\1\162\1\161\17\162" +
                    "\1\0\3\162\1\0\11\161\1\163\1\161\1\0\1\161" +
                    "\3\164\11\0\1\161\2\162\2\0\6\162\31\0\1\165" +
                    "\112\0\1\116\13\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\2\0" +
                    "\1\21\1\166\3\21\1\167\4\0\1\116\10\21\1\170" +
                    "\2\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\6\21\4\0" +
                    "\1\116\13\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\5\21" +
                    "\1\171\2\0\1\71\260\0\1\172\45\0\1\173\231\0" +
                    "\1\174\45\0\1\175\152\0\1\176\74\0\1\177\1\0" +
                    "\1\177\1\200\13\201\1\200\1\0\5\201\2\0\1\200" +
                    "\2\201\1\0\2\201\1\0\1\201\2\177\1\201\1\0" +
                    "\1\200\1\201\1\200\17\201\1\0\3\201\1\0\11\200" +
                    "\1\202\1\200\1\0\1\200\3\203\11\0\1\200\2\201" +
                    "\2\0\6\201\31\204\1\205\106\204\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\10\103\1\0\32\103\1\0" +
                    "\32\103\1\0\7\103\2\135\1\136\2\135\13\104\1\206" +
                    "\1\207\2\104\1\135\1\104\1\135\1\104\2\135\10\104" +
                    "\1\135\32\104\1\135\32\104\1\135\7\104\2\153\1\0" +
                    "\2\153\13\210\1\211\3\210\1\153\1\210\1\153\1\210" +
                    "\2\153\10\210\1\153\30\210\1\103\1\210\1\153\32\210" +
                    "\1\153\7\210\1\0\1\110\1\0\1\110\1\0\1\212" +
                    "\1\0\1\213\1\214\6\0\1\215\22\0\1\110\102\0" +
                    "\1\112\1\216\2\112\1\217\6\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\2\0\6\112\5\0\13\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\2\0\6\112\5\0\3\112\1\220\7\112\2\0" +
                    "\7\112\1\0\7\112\2\0\1\112\2\0\1\112\1\0" +
                    "\24\112\32\0\2\112\2\0\6\112\5\0\4\112\1\221" +
                    "\1\222\1\112\1\223\3\112\2\0\7\112\1\0\7\112" +
                    "\2\0\1\112\2\0\1\112\1\0\24\112\32\0\2\112" +
                    "\2\0\6\112\5\0\4\112\1\224\6\112\2\0\7\112" +
                    "\1\0\7\112\2\0\1\112\2\0\1\112\1\0\24\112" +
                    "\32\0\2\112\2\0\6\112\4\0\1\116\1\21\1\225" +
                    "\4\21\1\226\4\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\2\0" +
                    "\6\21\4\0\1\116\13\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\2\21\1\227\3\21\4\0\1\116\7\21\1\230" +
                    "\3\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\6\21\4\0" +
                    "\1\116\1\21\1\231\5\21\1\232\3\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\6\21\4\0\1\116\13\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\1\233\5\21\4\0\1\116" +
                    "\6\21\1\234\4\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\2\0" +
                    "\6\21\4\0\1\116\13\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\4\21\1\235\1\21\4\0\1\116\13\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\1\236\5\21\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\1\237\6\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\4\0\1\116\6\21\1\240\4\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\10\0\1\241\130\0\3\242\2\0" +
                    "\1\135\2\0\1\135\2\0\1\135\1\243\2\0\2\135" +
                    "\5\0\2\135\1\0\1\135\1\244\1\135\1\245\1\0" +
                    "\1\135\2\0\1\242\1\246\1\0\2\135\1\247\1\250" +
                    "\1\251\1\252\1\253\1\254\2\0\1\255\1\256\1\0" +
                    "\1\257\1\260\1\254\1\251\1\0\1\135\2\0\1\251" +
                    "\1\135\32\0\1\135\3\0\1\135\11\0\1\116\3\21" +
                    "\1\261\7\21\2\0\1\140\4\21\1\141\1\21\1\0" +
                    "\2\21\1\141\2\21\1\141\1\21\1\145\1\0\1\261" +
                    "\2\0\1\21\1\0\17\21\1\141\4\21\32\0\2\21" +
                    "\2\0\6\21\27\0\1\262\1\0\1\263\2\0\1\262" +
                    "\2\0\1\262\27\0\1\262\6\0\1\263\63\0\1\144" +
                    "\4\0\1\30\1\31\3\0\1\30\2\0\1\30\27\0" +
                    "\1\30\72\0\1\145\4\0\1\264\4\0\1\264\2\0" +
                    "\1\264\27\0\1\264\50\0\1\265\1\266\1\0\1\267" +
                    "\1\37\34\265\1\37\1\267\2\265\1\37\26\265\1\37" +
                    "\1\265\1\37\1\265\5\37\33\265\41\0\1\145\120\0" +
                    "\1\151\11\0\1\270\2\0\1\270\27\0\1\270\56\0" +
                    "\3\271\5\0\1\271\3\0\1\152\4\0\1\271\2\0" +
                    "\3\271\2\0\1\271\3\0\1\271\13\0\2\271\1\0" +
                    "\2\271\3\0\1\271\36\0\1\271\104\0\1\272\52\0" +
                    "\1\153\2\0\1\153\2\0\1\153\1\273\2\0\2\153" +
                    "\5\0\2\274\1\0\1\153\1\275\1\274\1\276\1\0" +
                    "\1\274\3\0\1\277\1\0\2\153\1\300\1\301\1\302" +
                    "\1\303\1\304\1\305\2\0\1\306\1\307\1\0\1\310" +
                    "\1\311\1\305\1\302\1\0\1\274\2\0\1\302\1\153" +
                    "\32\0\1\153\3\0\1\153\11\0\1\156\13\0\1\156" +
                    "\10\0\1\156\7\0\1\156\3\0\1\156\1\0\1\156" +
                    "\23\0\1\272\15\156\14\0\1\156\16\0\1\156\13\0" +
                    "\1\156\10\0\1\156\7\0\1\156\3\0\1\156\1\0" +
                    "\1\156\24\0\15\156\14\0\1\156\13\0\1\160\1\0" +
                    "\1\160\1\161\13\162\1\161\1\0\5\162\2\0\1\161" +
                    "\2\162\1\0\2\162\1\0\1\162\1\161\1\160\1\162" +
                    "\1\0\1\161\1\162\1\161\17\162\1\0\3\162\1\0" +
                    "\11\161\1\163\3\161\3\164\11\0\1\161\2\162\2\0" +
                    "\6\162\1\0\1\160\1\0\1\160\1\161\13\162\1\161" +
                    "\1\0\7\162\1\161\7\162\2\160\1\162\1\0\1\161" +
                    "\1\162\1\161\24\162\11\161\1\163\1\161\1\0\1\161" +
                    "\3\164\11\0\1\161\2\162\2\0\6\162\4\0\1\161" +
                    "\13\0\1\161\10\0\1\161\7\0\1\161\3\0\1\161" +
                    "\1\0\1\161\24\0\15\161\14\0\1\161\13\0\1\312" +
                    "\1\0\1\312\1\313\35\0\1\312\42\0\1\314\36\0" +
                    "\1\116\13\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\2\21" +
                    "\1\315\3\21\4\0\1\116\3\21\1\316\7\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\4\0\1\116\2\21" +
                    "\1\317\10\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\4\0\1\116\3\21\1\320\7\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\1\0\1\177\1\0\1\177\1\200" +
                    "\13\201\1\200\1\0\5\201\2\0\1\200\2\201\1\0" +
                    "\2\201\1\0\1\201\1\200\1\177\1\201\1\0\1\200" +
                    "\1\201\1\200\17\201\1\0\3\201\1\0\11\200\1\202" +
                    "\3\200\3\203\11\0\1\200\2\201\2\0\6\201\1\0" +
                    "\1\177\1\0\1\177\1\200\13\201\1\200\1\0\7\201" +
                    "\1\200\7\201\2\177\1\201\1\0\1\200\1\201\1\200" +
                    "\24\201\11\200\1\202\1\200\1\0\1\200\3\203\11\0" +
                    "\1\200\2\201\2\0\6\201\4\0\1\200\13\0\1\200" +
                    "\10\0\1\200\7\0\1\200\3\0\1\200\1\0\1\200" +
                    "\24\0\15\200\14\0\1\200\12\0\31\204\1\0\106\204" +
                    "\123\0\1\321\15\0\3\242\1\0\1\103\1\104\2\103" +
                    "\1\104\2\103\1\104\1\322\2\103\2\104\2\103\1\0" +
                    "\1\103\1\0\1\104\1\135\1\0\1\104\1\323\1\104" +
                    "\1\324\1\103\1\104\2\103\1\242\1\325\1\103\2\104" +
                    "\1\326\1\327\1\330\1\331\1\332\1\333\2\103\1\334" +
                    "\1\335\1\103\1\336\1\337\1\333\1\330\1\103\1\104" +
                    "\2\103\1\330\1\104\1\103\1\0\30\103\1\104\1\103" +
                    "\1\0\1\103\1\104\5\103\5\0\17\103\1\0\1\103" +
                    "\1\0\1\103\2\0\10\103\1\0\30\103\1\340\1\103" +
                    "\1\0\32\103\1\0\7\103\5\0\1\103\1\210\2\103" +
                    "\1\210\2\103\1\210\1\341\2\103\2\210\2\103\1\0" +
                    "\1\103\1\0\1\342\1\274\1\0\1\210\1\343\1\342" +
                    "\1\344\1\103\1\342\2\103\1\0\1\345\1\103\2\210" +
                    "\1\346\1\347\1\350\1\351\1\352\1\353\2\103\1\354" +
                    "\1\355\1\103\1\356\1\357\1\353\1\350\1\103\1\342" +
                    "\2\103\1\350\1\210\1\103\1\0\30\103\1\210\1\103" +
                    "\1\0\1\103\1\210\5\103\6\0\1\216\2\0\1\360" +
                    "\136\0\1\361\140\0\1\362\1\363\1\0\1\364\134\0" +
                    "\1\365\126\0\1\216\2\0\15\216\1\366\117\216\5\0" +
                    "\11\112\1\367\1\112\2\0\7\112\1\0\7\112\2\0" +
                    "\1\112\2\0\1\112\1\0\24\112\32\0\2\112\2\0" +
                    "\6\112\5\0\1\112\1\370\11\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\2\0\6\112\5\0\2\112\1\371\10\112\2\0" +
                    "\7\112\1\0\7\112\2\0\1\112\2\0\1\112\1\0" +
                    "\24\112\32\0\2\112\2\0\6\112\5\0\1\372\5\112" +
                    "\1\373\4\112\2\0\7\112\1\0\7\112\2\0\1\112" +
                    "\2\0\1\112\1\0\24\112\32\0\2\112\2\0\6\112" +
                    "\5\0\7\112\1\374\3\112\2\0\7\112\1\0\7\112" +
                    "\2\0\1\112\2\0\1\112\1\0\24\112\32\0\2\112" +
                    "\2\0\6\112\5\0\2\112\1\375\10\112\2\0\7\112" +
                    "\1\0\7\112\2\0\1\112\2\0\1\112\1\0\24\112" +
                    "\32\0\2\112\2\0\6\112\4\0\1\116\1\376\12\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\2\0\6\21\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\1\377\5\21" +
                    "\4\0\1\116\10\21\1\u0100\2\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\4\0\1\116\3\21\1\u0101\7\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\2\0\6\21\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\1\u0102\6\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\4\0\1\116\1\u0103\12\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\6\21\4\0\1\116\13\21\2\0\7\21\1\0" +
                    "\1\u0104\6\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\6\21\4\0\1\116\3\21\1\u0105" +
                    "\7\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\6\21\4\0" +
                    "\1\116\13\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\1\u0106" +
                    "\5\21\4\0\1\116\6\21\1\u0107\4\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\6\21\4\0\1\116\3\21\1\u0108" +
                    "\7\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\6\21\127\0" +
                    "\1\u0109\11\0\3\242\14\0\1\135\21\0\1\242\131\0" +
                    "\1\135\2\0\1\135\27\0\1\135\113\0\1\u010a\6\0" +
                    "\1\u010b\5\0\1\u010c\65\0\3\135\5\0\1\135\10\0" +
                    "\1\135\2\0\3\135\2\0\1\135\3\0\1\135\13\0" +
                    "\2\135\1\0\2\135\3\0\1\135\36\0\1\135\51\0" +
                    "\1\254\7\0\1\u010d\2\0\1\u010e\1\0\1\u010f\13\0" +
                    "\1\135\66\0\1\135\1\0\1\135\2\0\2\135\4\0" +
                    "\1\135\2\0\1\135\1\0\1\135\2\0\2\135\2\0" +
                    "\20\135\1\0\3\135\11\0\1\135\13\0\1\135\70\0" +
                    "\1\u010a\5\0\1\u0110\133\0\1\135\147\0\1\135\114\0" +
                    "\1\135\10\0\1\u0111\3\0\1\u0112\10\0\1\135\1\0" +
                    "\1\u0113\124\0\1\135\142\0\1\u0110\136\0\1\u0113\5\0" +
                    "\1\135\115\0\1\u010a\7\0\1\135\137\0\1\135\7\0" +
                    "\1\135\60\0\1\116\13\21\2\0\7\21\1\263\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\2\0\1\263" +
                    "\27\0\2\21\2\0\6\21\27\0\1\262\4\0\1\262" +
                    "\2\0\1\262\27\0\1\262\60\0\1\143\11\0\1\145" +
                    "\4\0\1\264\4\0\1\264\2\0\1\264\3\0\1\143" +
                    "\23\0\1\264\50\0\1\265\2\0\135\265\1\0\1\u0114" +
                    "\1\0\1\u0114\36\0\1\u0114\4\0\1\u0115\35\0\1\u0115" +
                    "\32\0\1\265\1\u0114\1\0\1\u0116\36\265\1\u0116\4\265" +
                    "\1\u0115\35\265\1\u0115\32\265\34\0\1\u0117\2\0\1\u0117" +
                    "\27\0\1\u0117\77\0\2\274\3\0\1\274\2\0\1\274" +
                    "\27\0\1\274\3\0\1\272\107\0\1\u0118\6\0\1\u0119" +
                    "\5\0\1\u011a\65\0\3\u011b\5\0\1\u011b\10\0\1\u011b" +
                    "\2\0\3\u011b\2\0\1\u011b\3\0\1\u011b\13\0\2\u011b" +
                    "\1\0\2\u011b\3\0\1\u011b\36\0\1\u011b\51\0\1\305" +
                    "\7\0\1\u011c\2\0\1\u011d\1\0\1\u011e\13\0\1\153" +
                    "\66\0\1\153\1\0\1\153\2\0\2\153\4\0\1\153" +
                    "\2\0\1\153\1\0\1\153\2\0\2\153\2\0\20\153" +
                    "\1\0\3\153\11\0\1\153\13\0\1\153\70\0\1\u0118" +
                    "\5\0\1\u011f\133\0\1\153\147\0\1\153\114\0\1\u0120" +
                    "\10\0\1\u0121\3\0\1\u0122\10\0\1\153\1\0\1\u0123" +
                    "\124\0\1\153\142\0\1\u011f\136\0\1\u0123\5\0\1\153" +
                    "\115\0\1\u0118\7\0\1\153\137\0\1\153\7\0\1\153" +
                    "\161\0\1\314\36\0\1\116\3\21\1\u0124\7\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\4\0\1\116\4\21" +
                    "\1\u0125\6\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\4\0\1\116\12\21\1\u0126\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\6\21\4\0\1\116\7\21\1\u0127\3\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\2\103\1\104\2\103\1\104" +
                    "\2\103\1\0\24\103\1\104\5\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\1\u0128\6\103\1\u0129\5\103\1\u012a\14\103" +
                    "\1\0\32\103\1\0\7\103\5\0\1\103\3\104\5\103" +
                    "\1\104\5\103\1\0\1\103\1\0\1\104\2\0\3\104" +
                    "\2\103\1\104\2\103\1\0\1\104\13\103\2\104\1\103" +
                    "\2\104\3\103\1\104\5\103\1\0\30\103\1\104\1\103" +
                    "\1\0\7\103\5\0\17\103\1\0\1\103\1\0\1\103" +
                    "\2\0\6\103\1\333\1\103\1\0\5\103\1\u012b\2\103" +
                    "\1\u012c\1\103\1\u012d\13\103\1\104\3\103\1\0\32\103" +
                    "\1\0\7\103\5\0\13\103\1\104\1\103\1\104\1\103" +
                    "\1\0\1\104\1\135\1\103\2\0\1\103\1\104\2\103" +
                    "\1\104\1\103\1\104\1\103\1\0\2\104\2\103\20\104" +
                    "\1\103\3\104\2\103\1\0\6\103\1\104\13\103\1\104" +
                    "\7\103\1\0\7\103\5\0\17\103\1\0\1\103\1\0" +
                    "\1\103\2\0\10\103\1\0\6\103\1\u0128\5\103\1\u012e" +
                    "\15\103\1\0\32\103\1\0\7\103\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\10\103\1\0\10\103\1\104" +
                    "\21\103\1\0\32\103\1\0\7\103\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\10\103\1\0\20\103\1\104" +
                    "\11\103\1\0\32\103\1\0\7\103\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\6\103\1\104\1\103\1\0" +
                    "\6\103\1\u012f\3\103\1\u0130\10\103\1\104\1\103\1\u0131" +
                    "\4\103\1\0\32\103\1\0\7\103\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\10\103\1\0\12\103\1\104" +
                    "\17\103\1\0\32\103\1\0\7\103\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\10\103\1\0\15\103\1\u012e" +
                    "\14\103\1\0\32\103\1\0\7\103\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\10\103\1\0\14\103\1\u0131" +
                    "\5\103\1\104\7\103\1\0\32\103\1\0\7\103\5\0" +
                    "\17\103\1\0\1\103\1\0\1\103\2\0\10\103\1\0" +
                    "\1\u0128\7\103\1\104\21\103\1\0\32\103\1\0\7\103" +
                    "\5\0\17\103\1\0\1\103\1\0\1\103\2\0\10\103" +
                    "\1\0\10\103\1\104\7\103\1\104\11\103\1\0\32\103" +
                    "\1\0\7\103\5\0\17\103\1\0\1\103\1\0\1\103" +
                    "\2\0\2\103\1\u0132\2\103\1\u0132\2\103\1\0\24\103" +
                    "\1\u0132\5\103\1\0\32\103\1\0\7\103\5\0\17\103" +
                    "\1\0\1\103\1\0\1\342\1\274\1\0\2\103\1\342" +
                    "\2\103\1\342\2\103\1\0\24\103\1\342\3\103\1\340" +
                    "\1\103\1\0\32\103\1\0\7\103\5\0\17\103\1\0" +
                    "\1\103\1\0\1\103\2\0\10\103\1\0\1\u0133\6\103" +
                    "\1\u0134\5\103\1\u0135\14\103\1\0\32\103\1\0\7\103" +
                    "\5\0\1\103\3\u0136\5\103\1\u0136\5\103\1\0\1\103" +
                    "\1\0\1\u0136\2\0\3\u0136\2\103\1\u0136\2\103\1\0" +
                    "\1\u0136\13\103\2\u0136\1\103\2\u0136\3\103\1\u0136\5\103" +
                    "\1\0\30\103\1\u0136\1\103\1\0\7\103\5\0\17\103" +
                    "\1\0\1\103\1\0\1\103\2\0\6\103\1\353\1\103" +
                    "\1\0\5\103\1\u0137\2\103\1\u0138\1\103\1\u0139\13\103" +
                    "\1\210\3\103\1\0\32\103\1\0\7\103\5\0\13\103" +
                    "\1\210\1\103\1\210\1\103\1\0\1\210\1\153\1\103" +
                    "\2\0\1\103\1\210\2\103\1\210\1\103\1\210\1\103" +
                    "\1\0\2\210\2\103\20\210\1\103\3\210\2\103\1\0" +
                    "\6\103\1\210\13\103\1\210\7\103\1\0\7\103\5\0" +
                    "\17\103\1\0\1\103\1\0\1\103\2\0\10\103\1\0" +
                    "\6\103\1\u0133\5\103\1\u013a\15\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\10\103\1\210\21\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\20\103\1\210\11\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\6\103\1\u013b\1\103\1\0\6\103\1\u013c\3\103\1\u013d" +
                    "\10\103\1\210\1\103\1\u013e\4\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\12\103\1\210\17\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\15\103\1\u013a\14\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\14\103\1\u013e\5\103\1\210\7\103\1\0" +
                    "\32\103\1\0\7\103\5\0\17\103\1\0\1\103\1\0" +
                    "\1\103\2\0\10\103\1\0\1\u0133\7\103\1\210\21\103" +
                    "\1\0\32\103\1\0\7\103\5\0\17\103\1\0\1\103" +
                    "\1\0\1\103\2\0\10\103\1\0\10\103\1\210\7\103" +
                    "\1\210\11\103\1\0\32\103\1\0\7\103\16\0\1\u013f" +
                    "\127\0\1\u0140\140\0\1\u0141\135\0\1\u0142\5\0\1\u0143" +
                    "\140\0\1\u0144\132\0\1\u0145\130\0\1\216\1\u0146\16\216" +
                    "\1\366\117\216\5\0\5\112\1\u0147\5\112\2\0\7\112" +
                    "\1\0\7\112\2\0\1\112\2\0\1\112\1\0\24\112" +
                    "\32\0\2\112\2\0\6\112\5\0\1\u0148\12\112\2\0" +
                    "\7\112\1\0\7\112\2\0\1\112\2\0\1\112\1\0" +
                    "\24\112\32\0\2\112\2\0\6\112\5\0\1\372\12\112" +
                    "\2\0\7\112\1\0\7\112\2\0\1\112\2\0\1\112" +
                    "\1\0\24\112\32\0\2\112\2\0\6\112\5\0\1\112" +
                    "\1\216\11\112\2\0\7\112\1\0\7\112\2\0\1\112" +
                    "\2\0\1\112\1\0\24\112\32\0\2\112\2\0\6\112" +
                    "\5\0\3\112\1\216\7\112\2\0\7\112\1\0\7\112" +
                    "\2\0\1\112\2\0\1\112\1\0\24\112\32\0\2\112" +
                    "\2\0\6\112\5\0\10\112\1\u0149\2\112\2\0\7\112" +
                    "\1\0\7\112\2\0\1\112\2\0\1\112\1\0\24\112" +
                    "\32\0\2\112\2\0\6\112\5\0\3\112\1\372\7\112" +
                    "\2\0\7\112\1\0\7\112\2\0\1\112\2\0\1\112" +
                    "\1\0\24\112\32\0\2\112\2\0\6\112\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\3\21\1\u014a\3\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\2\0" +
                    "\6\21\4\0\1\116\13\21\2\0\7\21\1\0\1\u014b" +
                    "\6\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\4\0\1\116\7\21\1\u014c\3\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\2\0\6\21\4\0\1\116" +
                    "\1\u014d\12\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\4\0\1\116\12\21\1\u014e\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\6\21\4\0\1\116\13\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\u014f\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\4\0\1\116\13\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\1\21\1\u0150\4\21\4\0\1\116" +
                    "\6\21\1\u0151\4\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\2\0" +
                    "\6\21\5\0\1\u0152\204\0\1\135\130\0\1\135\163\0" +
                    "\1\135\126\0\1\135\141\0\1\135\115\0\1\135\23\0" +
                    "\1\135\136\0\1\135\140\0\1\135\113\0\1\135\151\0" +
                    "\1\135\70\0\1\u0114\1\0\1\u0114\36\0\1\u0114\75\0" +
                    "\1\u0115\2\u0153\135\u0115\1\265\1\u0114\1\0\1\u0116\36\265" +
                    "\1\u0116\75\265\34\0\1\u0117\2\0\1\u0117\27\0\1\u0117" +
                    "\3\0\1\272\116\0\1\153\130\0\1\153\163\0\1\153" +
                    "\56\0\3\u011b\5\0\1\u011b\10\0\1\u011b\2\0\3\u011b" +
                    "\2\0\1\u011b\3\0\1\u011b\13\0\2\u011b\1\0\2\u011b" +
                    "\3\0\1\u011b\3\0\1\272\32\0\1\u011b\67\0\1\153" +
                    "\141\0\1\153\115\0\1\153\23\0\1\153\136\0\1\153" +
                    "\132\0\1\153\16\0\1\272\126\0\1\153\113\0\1\153" +
                    "\151\0\1\153\73\0\1\116\13\21\2\0\7\21\1\0" +
                    "\7\21\1\0\1\u0154\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\6\21\4\0\1\116\5\21\1\u0155" +
                    "\5\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\6\21\4\0" +
                    "\1\116\3\21\1\u0156\7\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\6\21\5\0\17\103\1\0\1\103\1\0\1\103" +
                    "\2\0\10\103\1\0\7\103\1\104\22\103\1\0\32\103" +
                    "\1\0\7\103\5\0\17\103\1\0\1\103\1\0\1\103" +
                    "\2\0\10\103\1\0\1\104\31\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\24\103\1\104\5\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\13\103\1\104\16\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\15\103\1\104\14\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\4\103\1\104\3\103\1\0\17\103\1\104\12\103\1\0" +
                    "\32\103\1\0\7\103\5\0\17\103\1\0\1\103\1\0" +
                    "\1\103\2\0\10\103\1\0\16\103\1\104\13\103\1\0" +
                    "\32\103\1\0\7\103\5\0\17\103\1\0\1\103\1\0" +
                    "\1\103\2\0\10\103\1\0\17\103\1\104\12\103\1\0" +
                    "\32\103\1\0\7\103\5\0\17\103\1\0\1\103\1\0" +
                    "\1\103\2\0\4\103\1\104\3\103\1\0\32\103\1\0" +
                    "\32\103\1\0\7\103\5\0\17\103\1\0\1\103\1\0" +
                    "\1\103\2\0\10\103\1\0\5\103\1\104\24\103\1\0" +
                    "\32\103\1\0\7\103\5\0\17\103\1\0\1\103\1\0" +
                    "\1\103\2\0\2\103\1\u0132\2\103\1\u0132\2\103\1\0" +
                    "\24\103\1\u0132\3\103\1\340\1\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\7\103\1\210\22\103\1\0\32\103\1\0" +
                    "\7\103\5\0\17\103\1\0\1\103\1\0\1\103\2\0" +
                    "\10\103\1\0\1\210\31\103\1\0\32\103\1\0\7\103" +
                    "\5\0\17\103\1\0\1\103\1\0\1\103\2\0\10\103" +
                    "\1\0\24\103\1\210\5\103\1\0\32\103\1\0\7\103" +
                    "\5\0\1\103\3\u0136\5\103\1\u0136\5\103\1\0\1\103" +
                    "\1\0\1\u0136\2\0\3\u0136\2\103\1\u0136\2\103\1\0" +
                    "\1\u0136\13\103\2\u0136\1\103\2\u0136\3\103\1\u0136\3\103" +
                    "\1\340\1\103\1\0\30\103\1\u0136\1\103\1\0\7\103" +
                    "\5\0\17\103\1\0\1\103\1\0\1\103\2\0\10\103" +
                    "\1\0\13\103\1\210\16\103\1\0\32\103\1\0\7\103" +
                    "\5\0\17\103\1\0\1\103\1\0\1\103\2\0\10\103" +
                    "\1\0\15\103\1\210\14\103\1\0\32\103\1\0\7\103" +
                    "\5\0\17\103\1\0\1\103\1\0\1\103\2\0\4\103" +
                    "\1\210\3\103\1\0\17\103\1\210\12\103\1\0\32\103" +
                    "\1\0\7\103\5\0\17\103\1\0\1\103\1\0\1\103" +
                    "\2\0\10\103\1\0\16\103\1\210\13\103\1\0\32\103" +
                    "\1\0\7\103\5\0\17\103\1\0\1\103\1\0\1\103" +
                    "\2\0\10\103\1\0\11\103\1\210\16\103\1\340\1\103" +
                    "\1\0\32\103\1\0\7\103\5\0\17\103\1\0\1\103" +
                    "\1\0\1\103\2\0\10\103\1\0\17\103\1\210\12\103" +
                    "\1\0\32\103\1\0\7\103\5\0\17\103\1\0\1\103" +
                    "\1\0\1\103\2\0\4\103\1\210\3\103\1\0\32\103" +
                    "\1\0\32\103\1\0\7\103\5\0\17\103\1\0\1\103" +
                    "\1\0\1\103\2\0\10\103\1\0\5\103\1\210\24\103" +
                    "\1\0\32\103\1\0\7\103\12\0\1\u0157\132\0\1\u0158" +
                    "\137\0\1\u0142\140\0\1\216\141\0\1\216\144\0\1\u0159" +
                    "\132\0\1\u0142\127\0\1\216\1\0\16\216\1\366\117\216" +
                    "\5\0\12\112\1\u015a\2\0\7\112\1\0\7\112\2\0" +
                    "\1\112\2\0\1\112\1\0\24\112\32\0\2\112\2\0" +
                    "\6\112\5\0\4\112\1\373\6\112\2\0\7\112\1\0" +
                    "\7\112\2\0\1\112\2\0\1\112\1\0\24\112\32\0" +
                    "\2\112\2\0\6\112\5\0\7\112\1\216\3\112\2\0" +
                    "\7\112\1\0\7\112\2\0\1\112\2\0\1\112\1\0" +
                    "\24\112\32\0\2\112\2\0\6\112\4\0\1\116\5\21" +
                    "\1\u015b\1\21\1\u015c\3\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\6\21\4\0\1\116\4\21\1\u015d\6\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\4\0\1\116\13\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\2\0\1\u015e\5\21\4\0" +
                    "\1\116\13\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\1\21\1\u015f\2\0" +
                    "\6\21\4\0\1\116\5\21\1\u0160\5\21\2\0\7\21" +
                    "\1\0\7\21\2\0\1\21\2\0\1\21\1\0\24\21" +
                    "\32\0\2\21\2\0\6\21\4\0\1\116\1\u0161\12\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\2\21\2\0\6\21\4\0\1\116" +
                    "\13\21\2\0\7\21\1\0\7\21\2\0\1\21\2\0" +
                    "\1\21\1\0\24\21\32\0\2\21\2\0\2\21\1\u0162" +
                    "\3\21\11\0\1\u0163\127\0\2\u0153\1\u0164\14\0\1\u0165" +
                    "\10\0\1\u0166\10\0\1\u0164\102\0\1\u0167\1\u0168\135\0" +
                    "\1\116\3\21\1\u0169\7\21\2\0\7\21\1\0\7\21" +
                    "\2\0\1\21\2\0\1\21\1\0\24\21\32\0\2\21" +
                    "\2\0\6\21\17\0\1\u016a\131\0\1\u0143\142\0\1\216" +
                    "\130\0\2\112\1\u016b\10\112\2\0\7\112\1\0\7\112" +
                    "\2\0\1\112\2\0\1\112\1\0\24\112\32\0\2\112" +
                    "\2\0\6\112\4\0\1\116\11\21\1\u016c\1\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\4\0\1\116\4\21" +
                    "\1\u016d\6\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\4\0\1\116\13\21\2\0\7\21\1\0\7\21\2\0" +
                    "\1\21\2\0\1\21\1\0\24\21\32\0\2\21\2\0" +
                    "\1\u016e\5\21\4\0\1\116\4\21\1\u016f\6\21\2\0" +
                    "\7\21\1\0\7\21\2\0\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\4\0\1\116\3\21" +
                    "\1\u0170\7\21\2\0\7\21\1\0\7\21\2\0\1\21" +
                    "\2\0\1\21\1\0\24\21\32\0\2\21\2\0\6\21" +
                    "\122\0\1\u0171\16\0\1\u0164\1\0\1\u0164\14\0\1\u0165" +
                    "\10\0\1\u0166\10\0\1\u0164\223\0\1\u0172\42\0\1\u0173" +
                    "\117\0\1\u0174\160\0\1\u0175\114\0\1\u0176\135\0\3\112" +
                    "\1\u0177\7\112\2\0\7\112\1\0\7\112\2\0\1\112" +
                    "\2\0\1\112\1\0\24\112\32\0\2\112\2\0\6\112" +
                    "\4\0\1\116\3\21\1\u0178\7\21\2\0\7\21\1\0" +
                    "\7\21\2\0\1\21\2\0\1\21\1\0\24\21\32\0" +
                    "\2\21\2\0\6\21\4\0\1\116\13\21\2\0\7\21" +
                    "\1\0\7\21\1\0\1\u0179\1\21\2\0\1\21\1\0" +
                    "\24\21\32\0\2\21\2\0\6\21\4\0\1\116\13\21" +
                    "\2\0\7\21\1\0\7\21\2\0\1\21\2\0\1\21" +
                    "\1\0\24\21\32\0\1\21\1\u017a\2\0\6\21\16\0" +
                    "\1\u017b\131\0\1\u017c\127\0\1\u0115\1\u017d\1\u0153\1\u017e" +
                    "\1\0\34\u0115\1\0\1\u017e\2\u0115\1\0\26\u0115\1\0" +
                    "\1\u0115\1\0\1\u0115\5\0\33\u0115\13\0\1\u017f\261\0" +
                    "\1\u0180\12\0\1\u0177\127\0\1\216\1\u0181\1\0\1\u0177" +
                    "\14\216\1\366\1\u0182\20\216\1\u0177\75\216\5\0\1\u0183" +
                    "\2\0\1\u0184\144\0\1\u0185\251\0\1\u0186\11\0\1\u017d" +
                    "\1\u0153\1\u017d\14\0\1\u0165\10\0\1\u0166\10\0\1\u017d" +
                    "\75\0\1\u0115\1\u017d\1\u0153\1\u017e\36\u0115\1\u017e\75\u0115" +
                    "\132\0\1\u0187\12\0\1\u0188\133\0\1\u0181\1\0\1\u0181" +
                    "\15\0\1\u0189\20\0\1\u0181\75\0\1\216\2\0\2\216" +
                    "\13\u018a\1\366\1\216\7\u018a\1\216\10\u018a\1\216\1\u018a" +
                    "\2\216\1\u018a\1\216\23\u018a\4\216\1\u018a\26\216\2\u018a" +
                    "\2\216\6\u018a\135\0\1\u018b\37\0\1\u018c\111\0\1\u018d" +
                    "\135\0\1\u018e\164\0\1\u018f\117\0\1\u0190\132\0\13\u0191" +
                    "\2\0\7\u0191\1\0\10\u0191\1\0\1\u0191\2\0\1\u0191" +
                    "\1\0\23\u0191\4\0\1\u0191\26\0\2\u0191\2\0\6\u0191" +
                    "\1\216\2\0\2\216\13\u018a\1\366\1\u0192\7\u018a\1\216" +
                    "\10\u018a\1\216\1\u018a\2\216\1\u018a\1\216\23\u018a\4\216" +
                    "\1\u018a\26\216\2\u018a\2\216\6\u018a\134\0\1\u0193\137\0" +
                    "\1\u0194\13\0\1\u0195\140\0\1\u0196\137\0\1\u0197\261\0" +
                    "\1\u0198\11\0\13\u0191\1\0\1\u0199\7\u0191\1\0\10\u0191" +
                    "\1\0\1\u0191\2\0\1\u0191\1\0\23\u0191\4\0\1\u0191" +
                    "\26\0\2\u0191\2\0\6\u0191\15\0\1\u019a\137\0\1\u019b" +
                    "\245\0\1\u019c\136\0\1\u019d\33\0\1\u019e\135\0\1\u019f" +
                    "\137\0\1\u01a0\141\0\1\u01a1\131\0\1\u01a2\261\0\1\u01a3" +
                    "\137\0\1\u01a4\22\0\1\u01a5\131\0\1\u01a6\140\0\1\u01a7" +
                    "\252\0\1\u01a8\15\0\2\u0153\135\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[33888];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\1\11\1\1\1\11\23\1\1\11\1\1\1\11" +
                    "\16\1\4\11\1\1\1\11\1\1\2\11\3\1\1\11" +
                    "\5\1\1\11\5\1\1\11\2\1\1\0\5\1\1\11" +
                    "\15\1\2\0\1\11\1\0\2\1\1\11\4\0\1\1" +
                    "\5\0\3\1\3\0\1\1\1\0\5\1\5\11\3\0" +
                    "\1\1\1\0\1\1\1\0\4\1\4\0\23\1\20\0" +
                    "\2\1\1\0\6\1\1\11\20\0\2\11\4\1\1\11" +
                    "\36\1\6\0\23\1\13\0\3\1\15\0\33\1\7\0" +
                    "\14\1\3\0\2\1\3\0\11\1\6\0\1\1\1\0" +
                    "\6\1\2\0\1\1\3\0\2\1\1\0\1\1\2\0" +
                    "\2\1\3\0\1\1\7\0\1\1\7\0\1\1\5\0" +
                    "\2\11\2\0\1\11\5\0\3\11\3\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[424];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _HaskellLexer() {
        this((java.io.Reader) null);
    }

    private int commentStart;
    private int commentDepth;

    private int optionsGhcStart;
    private int optionsGhcDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _HaskellLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                switch (zzLexicalState) {
                    case NCOMMENT: {
                        yybegin(YYINITIAL);
                        zzStartRead = commentStart;
                        return HS_NOT_TERMINATED_COMMENT;
                    }  // fall though
                    case 425:
                        break;
                    case NHADDOCK: {
                        yybegin(YYINITIAL);
                        zzStartRead = haddockStart;
                        return HS_NOT_TERMINATED_COMMENT;
                    }  // fall though
                    case 426:
                        break;
                    case QQ: {
                        yybegin(YYINITIAL);
                        zzStartRead = qqStart;
                        return HS_NOT_TERMINATED_QQ_EXPRESSION;
                    }  // fall though
                    case 427:
                        break;
                    case OPTIONS_GHC: {
                        yybegin(YYINITIAL);
                        return com.intellij.psi.TokenType.BAD_CHARACTER;
                    }  // fall though
                    case 428:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return com.intellij.psi.TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 83:
                        break;
                    case 2: {
                        return HS_NEWLINE;
                    }
                    // fall through
                    case 84:
                        break;
                    case 3: {
                        return com.intellij.psi.TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 85:
                        break;
                    case 4: {
                        return HS_VARSYM_ID;
                    }
                    // fall through
                    case 86:
                        break;
                    case 5: {
                        return HS_VAR_ID;
                    }
                    // fall through
                    case 87:
                        break;
                    case 6: {
                        return HS_BACKSLASH;
                    }
                    // fall through
                    case 88:
                        break;
                    case 7: {
                        return HS_DOUBLE_QUOTES;
                    }
                    // fall through
                    case 89:
                        break;
                    case 8: {
                        return HS_UNDERSCORE;
                    }
                    // fall through
                    case 90:
                        break;
                    case 9: {
                        return HS_CON_ID;
                    }
                    // fall through
                    case 91:
                        break;
                    case 10: {
                        return HS_DECIMAL;
                    }
                    // fall through
                    case 92:
                        break;
                    case 11: {
                        return HS_DOT;
                    }
                    // fall through
                    case 93:
                        break;
                    case 12: {
                        return HS_RIGHT_BRACKET;
                    }
                    // fall through
                    case 94:
                        break;
                    case 13: {
                        return HS_QUOTE;
                    }
                    // fall through
                    case 95:
                        break;
                    case 14: {
                        return HS_EQUAL;
                    }
                    // fall through
                    case 96:
                        break;
                    case 15: {
                        return HS_AT;
                    }
                    // fall through
                    case 97:
                        break;
                    case 16: {
                        return HS_VERTICAL_BAR;
                    }
                    // fall through
                    case 98:
                        break;
                    case 17: {
                        return HS_TILDE;
                    }
                    // fall through
                    case 99:
                        break;
                    case 18: {
                        return HS_CONSYM_ID;
                    }
                    // fall through
                    case 100:
                        break;
                    case 19: {
                        return HS_COLON_COLON;
                    }
                    // fall through
                    case 101:
                        break;
                    case 20: {
                        return HS_LEFT_ARROW;
                    }
                    // fall through
                    case 102:
                        break;
                    case 21: {
                        return HS_RIGHT_ARROW;
                    }
                    // fall through
                    case 103:
                        break;
                    case 22: {
                        return HS_DOUBLE_RIGHT_ARROW;
                    }
                    // fall through
                    case 104:
                        break;
                    case 23: {
                        return HS_LEFT_PAREN;
                    }
                    // fall through
                    case 105:
                        break;
                    case 24: {
                        return HS_RIGHT_PAREN;
                    }
                    // fall through
                    case 106:
                        break;
                    case 25: {
                        return HS_COMMA;
                    }
                    // fall through
                    case 107:
                        break;
                    case 26: {
                        return HS_SEMICOLON;
                    }
                    // fall through
                    case 108:
                        break;
                    case 27: {
                        return HS_LEFT_BRACKET;
                    }
                    // fall through
                    case 109:
                        break;
                    case 28: {
                        return HS_BACKQUOTE;
                    }
                    // fall through
                    case 110:
                        break;
                    case 29: {
                        return HS_LEFT_BRACE;
                    }
                    // fall through
                    case 111:
                        break;
                    case 30: {
                        return HS_RIGHT_BRACE;
                    }
                    // fall through
                    case 112:
                        break;
                    case 31: {
                        return HS_FORALL;
                    }
                    // fall through
                    case 113:
                        break;
                    case 32: {
                    }
                    // fall through
                    case 114:
                        break;
                    case 33: {
                        if (qqDepth > 0) {
                            qqDepth--;
                        } else {
                            yybegin(YYINITIAL);
                            zzStartRead = qqStart;
                            return HS_LIST_COMPREHENSION;
                        }
                    }
                    // fall through
                    case 115:
                        break;
                    case 34: {
                        qqDepth++;
                    }
                    // fall through
                    case 116:
                        break;
                    case 35: {
                        return HS_HASH;
                    }
                    // fall through
                    case 117:
                        break;
                    case 36: {
                        return HS_ONE_PRAGMA;
                    }
                    // fall through
                    case 118:
                        break;
                    case 37: {
                        return HS_DASH;
                    }
                    // fall through
                    case 119:
                        break;
                    case 38: {
                        return HS_PRAGMA_SEP;
                    }
                    // fall through
                    case 120:
                        break;
                    case 39: {
                        return HS_IF;
                    }
                    // fall through
                    case 121:
                        break;
                    case 40: {
                        return HS_IN;
                    }
                    // fall through
                    case 122:
                        break;
                    case 41: {
                        return HS_DO;
                    }
                    // fall through
                    case 123:
                        break;
                    case 42: {
                        return HS_OF;
                    }
                    // fall through
                    case 124:
                        break;
                    case 43: {
                        return HS_STRING_LITERAL;
                    }
                    // fall through
                    case 125:
                        break;
                    case 44: {
                        return HS_COMMENT;
                    }
                    // fall through
                    case 126:
                        break;
                    case 45: {
                        yybegin(QQ);
                        qqDepth = 0;
                        qqStart = getTokenStart();
                    }
                    // fall through
                    case 127:
                        break;
                    case 46: {
                        yybegin(NCOMMENT);
                        commentDepth = 0;
                        commentStart = getTokenStart();
                    }
                    // fall through
                    case 128:
                        break;
                    case 47: {
                        if (commentDepth > 0) {
                            commentDepth--;
                        } else {
                            yybegin(YYINITIAL);
                            zzStartRead = commentStart;
                            return HS_NCOMMENT;
                        }
                    }
                    // fall through
                    case 129:
                        break;
                    case 48: {
                        commentDepth++;
                    }
                    // fall through
                    case 130:
                        break;
                    case 49: {
                        if (haddockDepth > 0) {
                            haddockDepth--;
                        } else {
                            yybegin(YYINITIAL);
                            zzStartRead = haddockStart;
                            return HS_NHADDOCK;
                        }
                    }
                    // fall through
                    case 131:
                        break;
                    case 50: {
                        haddockDepth++;
                    }
                    // fall through
                    case 132:
                        break;
                    case 51: {
                        if (qqDepth > 0) {
                            qqDepth--;
                        } else {
                            yybegin(YYINITIAL);
                            zzStartRead = qqStart;
                            return HS_QUASIQUOTE;
                        }
                    }
                    // fall through
                    case 133:
                        break;
                    case 52: {
                        return HS_DIRECTIVE;
                    }
                    // fall through
                    case 134:
                        break;
                    case 53: {
                        return HS_LET;
                    }
                    // fall through
                    case 135:
                        break;
                    case 54: {
                        return HS_FLOAT;
                    }
                    // fall through
                    case 136:
                        break;
                    case 55: {
                        return HS_OCTAL;
                    }
                    // fall through
                    case 137:
                        break;
                    case 56: {
                        return HS_HEXADECIMAL;
                    }
                    // fall through
                    case 138:
                        break;
                    case 57: {
                        return HS_CHARACTER_LITERAL;
                    }
                    // fall through
                    case 139:
                        break;
                    case 58: {
                        yybegin(OPTIONS_GHC);
                        return HS_PRAGMA_START;
                    }
                    // fall through
                    case 140:
                        break;
                    case 59: {
                        yybegin(NHADDOCK);
                        haddockDepth = 0;
                        haddockStart = getTokenStart();
                    }
                    // fall through
                    case 141:
                        break;
                    case 60: {
                        yybegin(YYINITIAL);
                        return HS_PRAGMA_END;
                    }
                    // fall through
                    case 142:
                        break;
                    case 61: {
                        return HS_DATA;
                    }
                    // fall through
                    case 143:
                        break;
                    case 62: {
                        return HS_ELSE;
                    }
                    // fall through
                    case 144:
                        break;
                    case 63: {
                        return HS_CASE;
                    }
                    // fall through
                    case 145:
                        break;
                    case 64: {
                        return HS_HADDOCK;
                    }
                    // fall through
                    case 146:
                        break;
                    case 65: {
                        return HS_TYPE;
                    }
                    // fall through
                    case 147:
                        break;
                    case 66: {
                        return HS_THEN;
                    }
                    // fall through
                    case 148:
                        break;
                    case 67: {
                        return HS_INFIX;
                    }
                    // fall through
                    case 149:
                        break;
                    case 68: {
                        return HS_CLASS;
                    }
                    // fall through
                    case 150:
                        break;
                    case 69: {
                        return HS_WHERE;
                    }
                    // fall through
                    case 151:
                        break;
                    case 70: {
                        return HS_INFIXL;
                    }
                    // fall through
                    case 152:
                        break;
                    case 71: {
                        return HS_INFIXR;
                    }
                    // fall through
                    case 153:
                        break;
                    case 72: {
                        return HS_IMPORT;
                    }
                    // fall through
                    case 154:
                        break;
                    case 73: {
                        return HS_MODULE;
                    }
                    // fall through
                    case 155:
                        break;
                    case 74: {
                        return HS_DEFAULT;
                    }
                    // fall through
                    case 156:
                        break;
                    case 75: {
                        return HS_NEWTYPE;
                    }
                    // fall through
                    case 157:
                        break;
                    case 76: {
                        return HS_INSTANCE;
                    }
                    // fall through
                    case 158:
                        break;
                    case 77: {
                        return HS_DERIVING;
                    }
                    // fall through
                    case 159:
                        break;
                    case 78: {
                        return HS_INCLUDE_DIRECTIVE;
                    }
                    // fall through
                    case 160:
                        break;
                    case 79: {
                        return HS_TYPE_FAMILY;
                    }
                    // fall through
                    case 161:
                        break;
                    case 80: {
                        return HS_TYPE_INSTANCE;
                    }
                    // fall through
                    case 162:
                        break;
                    case 81: {
                        return HS_FOREIGN_IMPORT;
                    }
                    // fall through
                    case 163:
                        break;
                    case 82: {
                        return HS_FOREIGN_EXPORT;
                    }
                    // fall through
                    case 164:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
